{
	"info": {
		"_postman_id": "cb19182a-1294-418b-928e-b6c78b0591fc",
		"name": "Scheduler-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Add faculty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"     pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"pm.test(\"response must contain right body\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.name).to.eql(\"Faculty 1\");\r",
							"    pm.expect(responseJson.id).to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Faculty 1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/faculty/add",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"faculty",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get faculty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"     pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"pm.test(\"response must contain right body\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.id).to.eql(1);\r",
							"    pm.expect(responseJson.name).to.eql(\"Faculty 1\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/faculty/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"faculty",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get faculties",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"     pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"pm.test(\"response must be a list with right lenght\", function () {\r",
							"     pm.expect(pm.response.json()).to.be.lengthOf(1);\r",
							"});\r",
							"\r",
							"pm.test(\"response must have a right body\", function () {\r",
							"     const responseJson = pm.response.json()[0];\r",
							"     pm.expect(responseJson.id).to.eql(1);\r",
							"     pm.expect(responseJson.name).to.eql(\"Faculty 1\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/faculty/all",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"faculty",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update faculty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"faculty 1 upt\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/faculty/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"faculty",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Faculty 1 must be updated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"     pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"pm.test(\"response must contain right body\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.id).to.eql(1);\r",
							"    pm.expect(responseJson.name).to.eql(\"faculty 1 upt\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/faculty/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"faculty",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete faculty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.have.body(\"Delete faculty with id = 1\");\r",
							"});\r",
							"\r",
							"pm.test(\"response must contain right body\", function () {\r",
							"    pm.response.to.have.body(\"Delete faculty with id = 1\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/faculty/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"faculty",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Faculty 1 must be deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.have.status(404);\r",
							"     pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"pm.test(\"response must contain right body\", function () {\r",
							"     pm.expect(pm.response.text()).to.include(\"Faculty 1 not found \");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/faculty/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"faculty",
						"1"
					]
				}
			},
			"response": []
		}
	]
}